name: Build and Test C# Client and Arduino Server

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest  # Використовуємо останню версію Ubuntu для виконання дій

    steps:
    # 1. Крок: Клонуємо репозиторій
    - name: Checkout repository
      uses: actions/checkout@v3  # Використовуємо офіційний екшн для завантаження коду репозиторію

    # 2. Крок: Встановлюємо .NET середовище
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3  # Налаштовуємо потрібну версію .NET SDK
      with:
        dotnet-version: '7.x'  # Використовуємо потрібну версію .NET (змініть на вашу версію, якщо потрібно)

    # 3. Крок: Відновлюємо всі залежності
    - name: Restore dependencies
      run: dotnet restore  # Відновлюємо пакети залежностей проекту

    # 4. Крок: Збираємо проект у Release конфігурації
    - name: Build solution
      run: dotnet build --configuration Release --no-restore  # Виконуємо збірку проекту без відновлення

    # 5. Крок: Запускаємо тести з генерацією детальних звітів
    - name: Run unit tests
      run: dotnet test --configuration Release --no-build --logger "trx;LogFileName=test_results.trx" --results-directory ./test-results
      # Виконуємо тести. Тестові звіти зберігаються у форматі .trx в папці test-results

    # 6. Крок: Завантажуємо результати тестів як артефакт
    - name: Upload Test Results
      if: always()  # Завантажити результати тестів навіть у разі помилки
      uses: actions/upload-artifact@v3
      with:
        name: test-results  # Ім'я артефакта
        path: ./test-results/*.trx  # Шлях до файлів результатів тестів

    # 7. Крок: Публікуємо зібрані білди як артефакти
    - name: Publish build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts  # Ім'я артефакта з білдами
        path: |
          **/bin/Release/*  # Завантажуємо всі файли з папки Release

    # 8. Крок: Перевірка наявності форматування коду (за бажанням)
    - name: Check code format
      run: dotnet format --check  # Перевіряємо, чи дотримано форматування коду
  arduino:
    runs-on: ubuntu-latest  

    steps:
      # Клонуємо репозиторій, щоб отримати доступ до коду Arduino
      - name: Checkout code
        uses: actions/checkout@v3

      # Встановлюємо Arduino CLI для компіляції коду Arduino
      - name: Set up Arduino CLI
        uses: arduino/setup-arduino-cli@v1
        with:
          version: '0.19.2'  # Вказуємо конкретну версію Arduino CLI для використання

      # Встановлюємо платформу Arduino для компіляції під AVR (наприклад, Arduino Uno)
      - name: Install Arduino AVR platform
        run: arduino-cli core install arduino:avr  # Виконуємо команду для установки ядра AVR

      # Компілюємо Arduino-проєкт для плати Arduino Uno
      - name: Build Arduino Project
        run: |
          arduino-cli compile --fqbn arduino:avr:uno server/server.ino  # Запускаємо компіляцію для плати Arduino Uno
          
      # Завантажуємо результати компіляції Arduino як артефакт для подальшого використання
      - name: Upload Arduino Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: arduino-build  # Вказуємо ім'я артефакта для збереження результатів компіляції
          path: server/build/*  # Вказуємо шлях до файлів результатів компіляції Arduino
